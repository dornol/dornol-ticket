pipeline {
    agent any

    environment {
        MODULE = 'admin-api'

        GIT_CREDENTIAL_ID = 'Github-DornolApp'
        GIT_URL = 'https://github.com/dornol/dornol-ticket'

        DOCKER_REPOSITORY = "dornol-ticket-$MODULE"
        DOCKER_IMAGE_TAG = 'latest'
        DOCKER_HUB_CREDENTIAL_ID = 'DockerHub_kkkqwerasdf123'

        DOCKER_SWARM_SERVICE = "dornol_$MODULE"
    }

    parameters {
        gitParameter(
            branchFilter: 'refs/tags/(.*)',
            name: 'TAG_NAME',
            type: 'PT_TAG',
            sortMode: 'DESCENDING',
            quickFilterEnabled: true
        )
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "tags/$TAG_NAME", credentialsId: GIT_CREDENTIAL_ID, url: GIT_URL
            }
        }

        stage('Build Application') {
            steps {
                script {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean :$MODULE:build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {

                    sh 'echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin'

                    // Build and push the Docker image in one step
                    dir("modules/$MODULE") {
                        sh '''
                        docker buildx build \
                        --platform linux/arm64 \
                        -t $DOCKER_HUB_USERNAME/$DOCKER_REPOSITORY:$DOCKER_IMAGE_TAG \
                        -f Dockerfile . --quiet --push
                    '''
                    }
                }
            }
        }

        stage('Clean Up') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                    script {
                        // Remove the local Docker image after push
                        sh 'docker rmi $DOCKER_HUB_USERNAME/$DOCKER_REPOSITORY:$DOCKER_IMAGE_TAG'
                    }
                }
            }
        }

        stage('Update Docker Service') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                    script {
                        // Remove the local Docker image after push
                        sh 'docker service update --image $DOCKER_HUB_USERNAME/$DOCKER_REPOSITORY:$DOCKER_IMAGE_TAG $DOCKER_SWARM_SERVICE --quiet'
                    }
                }
            }
        }
    }
}
